import React, { useState, useEffect } from 'react';
import axios from 'axios';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { FiDollarSign, FiTrash2 } from 'react-icons/fi';
import { useNavigate } from 'react-router-dom';

function FinaceCoPage() {
  const navigate = useNavigate();
  const [expenses, setExpenses] = useState([]);
  const [filteredExpenses, setFilteredExpenses] = useState([]); // For search functionality
  const [searchQuery, setSearchQuery] = useState(''); // Search query
  const [formData, setFormData] = useState({
    category: '',
    title: '',
    date: '',
    amount: '',
    paymentMethod: '',
    description: '',
  });
  const [editExpenseId, setEditExpenseId] = useState(null);

  useEffect(() => {
    fetchExpenses();
  }, []);

  const fetchExpenses = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/expense/get-expenses');
      setExpenses(response.data);
      setFilteredExpenses(response.data); // Initialize filtered expenses
    } catch (error) {
      console.error('Error fetching expenses:', error);
    }
  };

  const handleSearch = (e) => {
    const query = e.target.value.toLowerCase();
    setSearchQuery(query);

    const filtered = expenses.filter((expense) =>
      Object.values(expense).some((value) =>
        String(value).toLowerCase().includes(query)
      )
    );
    setFilteredExpenses(filtered);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editExpenseId) {
        await axios.put(`http://localhost:5000/api/expense/update-expense/${editExpenseId}`, formData);
        setEditExpenseId(null);
      } else {
        await axios.post('http://localhost:5000/api/expense/add-expense', formData);
      }
      fetchExpenses();
      setFormData({
        category: '',
        title: '',
        date: '',
        amount: '',
        paymentMethod: '',
        description: '',
      });
    } catch (error) {
      console.error('Error saving expense:', error);
    }
  };

  const handleEdit = (expense) => {
    setEditExpenseId(expense._id);
    setFormData({
      category: expense.category,
      title: expense.title,
      date: expense.date.split('T')[0],
      amount: expense.amount,
      paymentMethod: expense.paymentMethod,
      description: expense.description,
    });
  };

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this expense?')) {
      try {
        await axios.delete(`http://localhost:5000/api/expense/delete-expense/${id}`);
        fetchExpenses();
      } catch (error) {
        console.error('Error deleting expense:', error);
      }
    }
  };

  // Calculate total expenses
  const totalExpenses = filteredExpenses.reduce(
    (total, expense) => total + parseFloat(expense.amount || 0),
    0
  );

  // Generate PDF for Expenses
  const generatePDF = () => {
    const doc = new jsPDF();
    let startY = 40; // Adjusted to leave space for the header
    const rowHeight = 10;

    // Add Header
    const addHeader = () => {
      doc.setFontSize(10);
      doc.setFont("helvetica", "bold");
      doc.text("COMMUNET", 14, 10); // Title
      doc.setFont("helvetica", "normal");
      doc.text("Phone: (555) 123-4567 | Mon-Fri, 9am-5pm", 14, 15);
      doc.text("Email: info@hoacommunity.com | support@hoacommunity.com", 14, 20);
      doc.text("Office: 123 Community Drive, Anytown, ST 12345", 14, 25);
      doc.line(14, 28, 200, 28); // Horizontal line
    };

    // Add Footer
    const addFooter = (pageNumber) => {
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text(`Page ${pageNumber}`, 100, 290); // Centered page number
      doc.text("Generated by COMMUNET Community", 14, 290); // Left-aligned footer text
    };

    // Initialize Header and Footer
    addHeader();
    let pageNumber = 1;

    // Title
    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    doc.text("Expense Report", 14, 35);

    // Table Headers
    const tableColumn = ["Category", "Date", "Amount", "Payment Method"];
    const columnWidths = [70, 40, 30, 70]; // Adjusted column widths
    const startX = 14;

    // Draw Header Background
    doc.setFillColor(200, 200, 200); // Light gray background
    doc.rect(startX, startY - 10, 190, rowHeight, "F"); // Header background rectangle

    // Draw Table Headers
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    let currentX = startX;
    tableColumn.forEach((header, index) => {
      doc.text(header, currentX, startY);
      currentX += columnWidths[index];
    });

    // Draw Table Rows
    doc.setFont("helvetica", "normal");
    startY += rowHeight; // Move to the next row
    filteredExpenses.forEach((expense, rowIndex) => {
      if (startY > 280) { // Check if the row exceeds the page height
        addFooter(pageNumber); // Add footer to the current page
        doc.addPage();
        pageNumber++;
        addHeader(); // Add header to the new page
        startY = 40; // Reset startY for the new page

        // Redraw Headers on New Page
        currentX = startX;
        doc.setFillColor(200, 200, 200);
        doc.rect(startX, startY - 10, 190, rowHeight, "F");
        tableColumn.forEach((header, index) => {
          doc.text(header, currentX, startY);
          currentX += columnWidths[index];
        });
        startY += rowHeight; // Move to the next row
      }

      // Draw Row Data
      currentX = startX;
      const rowData = [
        expense.category,
        expense.date.split("T")[0],
        expense.amount, // Normal number format without currency symbol
        expense.paymentMethod,
      ];

      rowData.forEach((data, colIndex) => {
        doc.text(String(data), currentX, startY);
        currentX += columnWidths[colIndex];
      });

      // Draw Row Border
      doc.rect(startX, startY - rowHeight + 2, 190, rowHeight, "S"); // Add border for each row
      startY += rowHeight; // Move to the next row
    });

    // Add Total Row
    doc.setFont("helvetica", "bold");
    doc.setFillColor(240, 240, 240); // Light gray background for total row
    doc.rect(startX, startY, 190, rowHeight, "F"); // Total row background
    doc.text("Total:", startX + columnWidths[0] + columnWidths[1], startY + 7);
    doc.text(
      totalExpenses.toFixed(2), // Normal number format for total
      startX + columnWidths[0] + columnWidths[1] + columnWidths[2],
      startY + 7
    );

    // Add Footer to the Last Page
    addFooter(pageNumber);

    // Save the PDF
    doc.save("Expense_Report.pdf");
  };

  const handleDustManagementClick = () => {
    navigate('/dust-report');
  };

  return (
    <div className="flex min-h-screen bg-gray-50">
      {/* Sidebar */}
      <div className="w-64 bg-white shadow-sm">
        <div className="p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-6">Management</h2>
          <nav className="space-y-1">
            <div className="flex items-center px-4 py-3 text-blue-600 bg-blue-50 rounded-xl">
              <FiDollarSign className="w-5 h-5 mr-3" />
              <span>Expense Management</span>
            </div>
            <div 
              onClick={handleDustManagementClick}
              className="flex items-center px-4 py-3 text-gray-600 hover:bg-blue-50 hover:text-blue-600 rounded-xl transition-all duration-200 cursor-pointer"
            >
              <FiTrash2 className="w-5 h-5 mr-3" />
              <span>Dust Management</span>
            </div>
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 p-6">
        <h1 className="text-3xl font-bold text-center mb-6 text-gray-800">Expense Management</h1>

        {/* Total Expenses */}
        <div className="bg-gray-100 p-4 rounded-lg shadow-md mb-6">
          <h2 className="text-xl font-semibold text-gray-700">Total Expenses</h2>
          <p className="text-2xl font-bold text-sky-950">Rs.{totalExpenses.toFixed(2)}</p>
        </div>

        {/* Expense Form */}
        <form
          onSubmit={handleSubmit}
          className="bg-white shadow-md rounded-lg p-6 mb-8 border border-gray-200"
        >
          <h2 className="text-xl font-semibold mb-4 text-gray-700">
            {editExpenseId ? 'Edit Expense' : 'Add Expense'}
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-gray-600 font-medium mb-2">Category</label>
              <select
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={formData.category}
                onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                required
              >
                <option value="" disabled>Select a category</option>
                <option value="Housing">Housing</option>
                <option value="Utilities">Utilities</option>
                <option value="Groceries & Household Supplies">Groceries & Household Supplies</option>
                <option value="Transportation">Transportation</option>
                <option value="Health & Medical">Health & Medical</option>
                <option value="Dining & Entertainment">Dining & Entertainment</option>
                <option value="Home Improvement & Furnishings">Home Improvement & Furnishings</option>
              </select>
            </div>
            <div>
              <label className="block text-gray-600 font-medium mb-2">Title</label>
              <input
                type="text"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Enter title"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                onKeyPress={(e) => {
                  const regex = /^[a-zA-Z\s]*$/; // Allow only letters and spaces
                  if (!regex.test(e.key)) {
                    e.preventDefault(); // Prevent invalid characters
                  }
                }}
                required
              />
            </div>
            <div>
              <label className="block text-gray-600 font-medium mb-2">Date</label>
              <input
                type="date"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={formData.date}
                onChange={(e) => setFormData({ ...formData, date: e.target.value })}
                onFocus={(e) => e.target.showPicker()} // Open the date picker on focus
                max={new Date().toISOString().split('T')[0]} // Set max to today's date
                required
              />
            </div>
            <div>
              <label className="block text-gray-600 font-medium mb-2">Amount</label>
              <input
                type="number"
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Enter amount"
                value={formData.amount}
                onChange={(e) => setFormData({ ...formData, amount: e.target.value })}
                onKeyPress={(e) => {
                  const regex = /^[0-9]*$/; // Allow only numbers
                  if (!regex.test(e.key)) {
                    e.preventDefault(); // Prevent invalid characters
                  }
                }}
                required
              />
            </div>
            <div>
              <label className="block text-gray-600 font-medium mb-2">Payment Method</label>
              <select
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={formData.paymentMethod}
                onChange={(e) => setFormData({ ...formData, paymentMethod: e.target.value })}
                required
              >
                <option value="" disabled>Select a payment method</option>
                <option value="Cash">Cash</option>
                <option value="Card Payment">Card Payment</option>
                <option value="Bank Transfer">Bank Transfer</option>
              </select>
            </div>
            <div>
              <label className="block text-gray-600 font-medium mb-2">Description</label>
              <textarea
                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Enter description"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              />
            </div>
          </div>
          <button
            type="submit"
            className="mt-4 bg-sky-950 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition"
          >
            {editExpenseId ? 'Update Expense' : 'Add Expense'}
          </button>
        </form>

        {/* Expense List */}
        <h2 className="text-2xl font-semibold mb-4 text-gray-700">Expense List</h2>
        {/* Search Bar and Download PDF Button */}
        <div className="flex justify-between items-center mb-6">
          {/* Search Bar */}
          <input
            type="text"
            placeholder="Search expenses..."
            value={searchQuery}
            onChange={handleSearch}
            className="w-1/2 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />

          {/* Download PDF Button */}
          <button
            onClick={generatePDF}
            className="bg-sky-950 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition"
          >
            Download PDF
          </button>
        </div>
        <table className="w-full border-collapse border border-gray-300">
          <thead>
            <tr className="bg-gray-100">
              <th className="border border-gray-300 px-4 py-2 text-left">Category</th>
              <th className="border border-gray-300 px-4 py-2 text-left">Title</th>
              <th className="border border-gray-300 px-4 py-2 text-left">Date</th>
              <th className="border border-gray-300 px-4 py-2 text-left">Amount</th>
              <th className="border border-gray-300 px-4 py-2 text-left">Payment Method</th>
              <th className="border border-gray-300 px-4 py-2 text-left">Description</th>
              <th className="border border-gray-300 px-4 py-2 text-left">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredExpenses.map((expense) => (
              <tr key={expense._id} className="hover:bg-gray-50">
                <td className="border border-gray-300 px-4 py-2">{expense.category}</td>
                <td className="border border-gray-300 px-4 py-2">{expense.title}</td>
                <td className="border border-gray-300 px-4 py-2">{expense.date.split('T')[0]}</td>
                <td className="border border-gray-300 px-4 py-2">{expense.amount}</td>
                <td className="border border-gray-300 px-4 py-2">{expense.paymentMethod}</td>
                <td className="border border-gray-300 px-4 py-2">{expense.description}</td>
                <td className="border border-gray-300 px-4 py-2">
                  <div className="flex space-x-2">
                    <button
                      className="bg-sky-950 text-white px-4 py-1 rounded-lg hover:bg-yellow-600 transition"
                      onClick={() => handleEdit(expense)}
                    >
                      Edit
                    </button>
                    <button
                      className="bg-red-500 text-white px-4 py-1 rounded-lg hover:bg-red-600 transition"
                      onClick={() => handleDelete(expense._id)}
                    >
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default FinaceCoPage;
